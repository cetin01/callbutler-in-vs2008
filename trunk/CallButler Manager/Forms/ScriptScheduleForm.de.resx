<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="smoothLabel3.HelpText" xml:space="preserve">
    <value>Definieren Sie den Pfad zum individuellen Skript. Callbutler wird diesen individuellen Skript zu definierten Zeit gemäß Skript Zeitplan ausführen.

Bitte beachten Sie, wenn Sie den CallButler Dienst auf einem anderen PC verwalten, dass Sie den Skriptpfad definieren müssen, der auf diesem Computer gespeichert ist.</value>
  </data>
  <data name="smoothLabel3.HelpTitle" xml:space="preserve">
    <value>individuelles Skript-Verzeichnis</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="smoothLabel3.Size" type="System.Drawing.Size, System.Drawing">
    <value>104, 13</value>
  </data>
  <data name="smoothLabel3.Text" xml:space="preserve">
    <value>Skript-Verzeichnis</value>
  </data>
  <data name="smoothLabel5.HelpText" xml:space="preserve">
    <value>Definiere einen Namen für den Skript Zeitplan. Dieser Name ist nur für interne Zwecke und beeinflusst den Zeitplan des Skriptes nicht.</value>
  </data>
  <data name="smoothLabel5.HelpTitle" xml:space="preserve">
    <value>Name des Zeitplan / Beschreibung</value>
  </data>
  <data name="smoothLabel5.Size" type="System.Drawing.Size, System.Drawing">
    <value>182, 13</value>
  </data>
  <data name="smoothLabel5.Text" xml:space="preserve">
    <value>Name des Zeitplan / Beschreibung</value>
  </data>
  <data name="cbEnabled.Size" type="System.Drawing.Size, System.Drawing">
    <value>173, 17</value>
  </data>
  <data name="cbEnabled.Text" xml:space="preserve">
    <value>Aktiviere diesen Skript Zeitplan</value>
  </data>
  <data name="btnScriptBrowse.Text" xml:space="preserve">
    <value>Blättern...</value>
  </data>
  <data name="wizardHeader1.Description" xml:space="preserve">
    <value>Bitte definieren Sie einen Namen und einen Pfad für das individuelle Skript</value>
  </data>
  <data name="wizardHeader1.SubTitle" xml:space="preserve">
    <value>Allgemeine Einstellungen</value>
  </data>
  <data name="wizardHeader1.Title" xml:space="preserve">
    <value>Skript Zeitplan</value>
  </data>
  <data name="pgGeneral.Text" xml:space="preserve">
    <value>Allgemeine Einstellungen</value>
  </data>
  <data name="lblHours.HelpText" xml:space="preserve">
    <value>Markieren Sie hier, wenn Sie CallButler Skripte nur zu bestimmten Zeiten des Tages oder der Wochen benutzen möchten.  Sie können die Uhrzeit für das Skript definieren, in dem Sie auf die bestimmte Uhrzeit klicken oder mit der Maus das Zeitraster kennzeichnen.

Wenn Sie Option nicht gewählt ist, wird CallButler dieser Skript zu jederzeit verwenden.</value>
  </data>
  <data name="lblHours.HelpTitle" xml:space="preserve">
    <value>Skript Stunden</value>
  </data>
  <data name="lblHours.Size" type="System.Drawing.Size, System.Drawing">
    <value>252, 13</value>
  </data>
  <data name="lblHours.Text" xml:space="preserve">
    <value>Dieser Skript soll nur zu folgenden Zeiten laufen:</value>
  </data>
  <data name="label12.Size" type="System.Drawing.Size, System.Drawing">
    <value>48, 13</value>
  </data>
  <data name="label12.Text" xml:space="preserve">
    <value>Zeitzone</value>
  </data>
  <data name="btnSelectInverse.Location" type="System.Drawing.Point, System.Drawing">
    <value>209, 151</value>
  </data>
  <data name="btnSelectInverse.Size" type="System.Drawing.Size, System.Drawing">
    <value>125, 17</value>
  </data>
  <data name="btnSelectInverse.Text" xml:space="preserve">
    <value>Auswahl umkehren</value>
  </data>
  <data name="btnSelectAll.Size" type="System.Drawing.Size, System.Drawing">
    <value>99, 17</value>
  </data>
  <data name="btnSelectAll.Text" xml:space="preserve">
    <value>alle auswählen</value>
  </data>
  <data name="btnSelectNone.Location" type="System.Drawing.Point, System.Drawing">
    <value>100, 151</value>
  </data>
  <data name="btnSelectNone.Size" type="System.Drawing.Size, System.Drawing">
    <value>110, 17</value>
  </data>
  <data name="btnSelectNone.Text" xml:space="preserve">
    <value>keine auswählen</value>
  </data>
  <data name="wizardHeader3.Description" xml:space="preserve">
    <value>definieren den Zeitraum, zu welcher das Skript laufen soll</value>
  </data>
  <data name="wizardHeader3.SubTitle" xml:space="preserve">
    <value>Laufzeiten</value>
  </data>
  <data name="wizardHeader3.Title" xml:space="preserve">
    <value>Skript Zeitplan</value>
  </data>
  <data name="pgHours.Text" xml:space="preserve">
    <value>Laufzeiten</value>
  </data>
  <data name="$this.Font" type="System.Drawing.Font, System.Drawing">
    <value>Tahoma, 8.25pt</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Skript Zeitplan</value>
  </data>
</root>